version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: connex-postgres
    environment:
      POSTGRES_DB: connex
      POSTGRES_USER: connex
      POSTGRES_PASSWORD: connex_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./internal/db/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U connex -d connex"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - connex-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: connex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - connex-network

  # Jaeger for tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: connex-jaeger
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # Collector
      - "14250:14250"  # Collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - connex-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: connex-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - connex-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: connex-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./scripts/grafana/datasources:/etc/grafana/provisioning/datasources
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - connex-network

  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: connex-app
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - PORT=8080
      - DATABASE_URL=postgres://connex:connex_password@postgres:5432/connex?sslmode=disable
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - OTEL_ENABLED=true
      - OTEL_JAEGER_URL=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=connex
      - OTEL_ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - connex-network
    restart: unless-stopped

  # Load testing with k6
  k6:
    image: grafana/k6:latest
    container_name: connex-k6
    ports:
      - "6565:6565"
    volumes:
      - ./tests/load:/scripts
    environment:
      - K6_OUT=influxdb=http://influxdb:8086/k6
    depends_on:
      - app
    networks:
      - connex-network

  # InfluxDB for k6 metrics
  influxdb:
    image: influxdb:1.8
    container_name: connex-influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=k6
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin
    volumes:
      - influxdb_data:/var/lib/influxdb
    networks:
      - connex-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  influxdb_data:

networks:
  connex-network:
    driver: bridge 